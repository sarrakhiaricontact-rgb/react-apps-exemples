import { configureStore } from "@reduxjs/toolkit";
import gameReducer from "./slices/gameSlice";
import {
  useDispatch,
  useSelector,
  type TypedUseSelectorHook,
} from "react-redux";

/**
 * üèóÔ∏è 1. Configuration du store Redux
 * Le store est le conteneur central de tout l‚Äô√©tat global de l‚Äôapplication.
 * On y d√©clare les reducers utilis√©s (ici un seul : "game").
 */
export const store = configureStore({
  reducer: {
    game: gameReducer, // On enregistre le slice "game" dans le store
  },
});

/**
 * üß† 2. Typage du store pour TypeScript
 *
 * Redux Toolkit permet d‚Äôinf√©rer automatiquement les types du store :
 * - RootState ‚Üí repr√©sente la forme compl√®te de l‚Äô√©tat global
 * - AppDispatch ‚Üí repr√©sente la fonction dispatch typ√©e
 */

/**
 * ‚úÖ `RootState`
 * Type repr√©sentant l‚Äôensemble de l‚Äô√©tat global de Redux.
 * Ici, il correspond √† : { game: GameStateInterface }
 *
 * Cela permet √† TypeScript de conna√Ætre la structure exacte du store,
 * donc quand tu feras `useSelector((state) => state.game.player)`
 * il saura exactement ce qu‚Äôest `player`.
 */
export type RootState = ReturnType<typeof store.getState>;

/**
 * ‚úÖ `AppDispatch`
 * Type repr√©sentant la fonction `dispatch` du store.
 * Cela garantit que chaque action dispatch√©e est conforme aux types d√©finis
 * dans tes slices Redux.
 */
export type AppDispatch = typeof store.dispatch;

/**
 * ‚öôÔ∏è 3. Cr√©ation de hooks personnalis√©s typ√©s
 *
 * Ces deux hooks sont des versions "typ√©es" des hooks standards
 * de React Redux (`useDispatch` et `useSelector`).
 *
 * ‚úÖ `useAppDispatch` ‚Üí permet d‚Äôenvoyer des actions en toute s√©curit√©
 * ‚úÖ `useAppSelector` ‚Üí permet de lire l‚Äô√©tat du store avec autocompl√©tion et s√©curit√© de type
 *
 * Gr√¢ce √† cela, tu n‚Äôas plus besoin de faire :
 * `useDispatch<AppDispatch>()` ou `useSelector<RootState>()`
 * dans chaque composant.
 */
export const useAppDispatch: () => AppDispatch = useDispatch;
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
